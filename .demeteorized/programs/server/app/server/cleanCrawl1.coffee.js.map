{"version":3,"file":"/server/cleanCrawl1.coffee.js","sources":["cleanCrawl1.coffee"],"names":[],"mappings":";AAC4B;A","sourcesContent":["# factualCrawl = () ->\n#     # test define center of a c\n#   lat1 = 40.76679992935825\n#   lon1 = -73.96784278317864\n#   lat2 = 40.76883133248217\n#   lon2 = -73.96447392865593\n#   console.log lon2 - lon1\n#   console.log lat2 - lat1\n#   lat3 = undefined\n#   lon3 = undefined\n#   dLon = undefined\n#   dLat = undefined\n#   dLon = undefined\n#   R = undefined\n#   a = undefined\n#   c = undefined\n#   d = undefined\n#   brng = undefined\n#   Bx = undefined\n#   By = undefined\n#   marker = undefined\n#   markeru = undefined\n\n#   toRad = (Value) ->\n#     Value * Math.PI / 180\n\n#   bearing = () ->\n#     y = Math.sin(dLon) * Math.cos(lat2)\n#     x = Math.cos(lat1) * Math.sin(lat2) - Math.sin(lat1) * Math.cos(lat2) * Math.cos(dLon)\n#     brng = toRad(Math.atan2(y, x))\n#     console.log \"brng\" + brng\n\n#   # calcul distance\n#   R = 6371\n#   dLat = toRad(lat2 - lat1)\n#   dLon = toRad(lon2 - lon1)\n#   a = Math.sin(dLat / 2) * Math.sin(dLat / 2) + Math.cos(toRad(lat1)) * Math.cos(toRad(lat2)) * Math.sin(dLon / 2) * Math.sin(dLon / 2)\n#   c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a))\n#   d = (R * c) * 1000\n#   console.log 'this is distance in meter' + ' ' + d\n#   #Create point between the two points to define the center of circle inside\n#   console.log lat3 = lat1 + (lat2 - lat1)/2\n#   console.log lon3 = lon2 + (lon1 - lon2)/2\n#   aaa = \"this is middle\"\n\n#   # get data from Factual\n#   keyFactual = 'Y1irlCd3KfTm113yFd3GVlDzkGvtbzU5nqNteLqZ'\n#   filterInJson = '{\"$circle\":{\"$center\":[#{lat3},#{lon3}],\"$meters\":#{d}}}' + '?filters={category_ids:{\"$includes\":123}}'\n#   objectFilter = EJSON.stringify(filterInJson)\n#   newtest = EJSON.parse objectFilter\n#   console.log newtest\n#   urlFac = \"http://api.v3.factual.com/t/restaurants-us?geo=\" + newtest + \"&KEY=#{keyFactual}\"\n#   console.log urlFac\n#   # console.log A\n#   Factual = undefined\n#   factual = undefined\n#   Factual = Meteor.npmRequire(\"factual-api\")\n#   factual = new Factual(\"Y1irlCd3KfTm113yFd3GVlDzkGvtbzU5nqNteLqZ\", \"nAYWpc1AZx6TwdsmwwpxT526Oq6YqSMjiE4ERKuV\")\n\n#   factual.get \"/t/places-us\",\n#     filters:\n#       category_ids:\n#         $includes: 347\n#   , Meteor.bindEnvironment (error, res) ->\n#     console.log res.data\n#     Markers.insert(markerObject(-118.419078, 34.058629))\n#     markeru = Markers.findOne({lng: 34.058629})\n#     console.log markeru\n#     Markers.update\n#       _id: markeru._id\n#     ,\n#       yelp: true,\n#       name: \"test\"\n#       lng: -118.419078\n#       lat: 34.058629\n#     lengthOfJson = res.data.length\n#     limit = lengthOfJson - 1\n#     for i in [0...limit]\n#       # console.log res.data\n#       console.log country = res.data[i].country\n#       console.log latFactual = res.data[i].latitude\n#       console.log lonFactual = res.data[i].longitude\n#       console.log name = res.data[i].name\n#       console.log tel = res.data[i].tel\n#       console.log factual_id = res.data[i].factual_id\n#       console.log region = res.data[i].region\n#       console.log postcode = res.data[i].postcode\n#       console.log fax = res.data[i].fax\n#       yelp = false\n#       url = undefined\n#       Markers.insert(markerObject(latFactual, lonFactual, name, tel, factual_id, region, postcode, fax, url, yelp))\n#       marker = Markers.findOne({lat: latFactual, lng: lonFactual, yelp: true})\n#       if marker is undefined\n#         console.log 'not this one'\n#       else\n#         console.log 'here is marker' + marker._id + latData + lngData + name + tel + factual_id + region + postcode + fax + url + yelp\n#         yelp = true\n#         Markers.update\n#           _id: marker._id\n#         ,\n#           lat: latData\n#           lng: lngData\n#           name: name\n#           tel: tel\n#           factual_id: factual_id\n#           region: region\n#           postcode: postcode\n#           fax: fax\n#           yelp: yelp\n# yelpCrawl = (lonN, latN, lonNn, latNn, urlTo) ->\n#   cleanS = undefined\n#   scrap = [{}]\n#   markers = [{}]\n#   location = [{}]\n#   url = [{}]\n#   country = undefined\n#   latFactual = undefined\n#   lonFactual = undefined\n#   name = undefined\n#   tel = undefined\n#   factual_id = undefined\n#   region = undefined\n#   postcode = undefined\n#   fax = undefined\n#   markerObject = (latData, lngData, name, tel, factual_id, region, postcode, fax, url, yelp) ->\n#     {lat: latData, lng: lngData, name: name, tel: tel, factual_id: factual_id, region: region, postcode: postcode, fax: fax, url: url, yelp: yelp}\n\n#   clean = (txt) ->\n#     chr = ['\\\\']\n#     i = 0\n#     while i <= 0\n#       cleanS = txt.split(chr[i]).join(\"\")\n#       i++\n#   $ = Meteor.http.get uuuRl\n#   console.log $\n#   b = JSON.stringify($);\n#   # console.log b\n#   numberOfPages = b.indexOf(\"prev-next\");\n#   data = b.substring(numberOfPages - 109, numberOfPages)\n#   # console.log data\n#   numbOf = data.charAt(0)\n#   # console.log numbOf\n#   n = b.indexOf(\"]}}}\");\n#   m = b.indexOf(\"latitude\")\n#   res = b.substring(m, n + 4);\n#   o = res.indexOf(\"zoom\");\n#   console.log better = res.substring(o + 13);\n#   clean('{' + better + '}')\n#   scrap = EJSON.parse(cleanS)\n#   console.log scrap\n#   a = scrap.markers\n#   console.log a\n#   length = (Object.keys(a).length)\n\n#   console.log indexForThatStringInit = b.indexOf('Page 1 of') + 9\n#   console.log indexForThatStringEnd  = indexForThatStringInit + 5\n#   console.log thatString = b.substring(indexForThatStringInit, indexForThatStringEnd)\n#   console.log numberOfPagesAvailable = parseInt(thatString)\n#   for i in [1...length]\n#     latData = a[i].location.latitude\n#     lngData = a[i].location.longitude\n#     urli = a[i].url\n#     yelp = true\n#     Markers.insert(markerObject(latData, lngData, name, tel, factual_id, region, postcode, fax, urli, yelp))\n#     console.log url + \" \" + latData + \" \" + lngData\n#     console.log('end')\n\n#   factualCrawl()\n\n# crawler = () ->\n#   array = Bounds.find().fetch()\n#   for key, object of array\n#     # console.log object.marker0[0] + \"it goes here\"\n#     # urLoop = urlMaker(object.marker0[0], object.marker0[1], object.marker1[1], object.marker1[0])\n#     # console.log urLoop\n#     yelpCrawl(object.marker0[1], object.marker0[0], object.marker1[1], object.marker1[0], object.url)\n\n# saveBound = (lonN0, latN0, lonN1, latN1, url, type) ->\n#   console.log 'saveBound'\n#   if type = \"db\"\n#     marker0 = [lonN0, latN0]\n#     marker1 = [lonN1, latN0]\n#     Bounds.insert {\n#       marker0: marker0\n#       marker1: marker1\n#       url: url\n#     }\n#   if type = \"ar\"\n#     console.log latN0\n#     console.log lonN0\n#     marker0 = [lonN0, latN0]\n#     marker1 = [lonN1, latN1]\n#     arrayOfObj.push {\n#       marker0: marker0\n#       marker1: marker1\n#       url: url\n#     }\n\n# urlMaker = (lonNn, latNn, lonN, latN) ->\n#   boundlnglat = lonNn + \",\" + latNn + \",\" + lonN + \",\" + latN\n#   urlTo =  \"http://www.yelp.com/search?find_desc=&find_loc=shopping&l=g:\" + boundlnglat\n#   return uuuRl = encodeURI urlTo\n\n# southToNord = (latMax) ->\n#     for key, object of arrayOfObj\n#       if object.marker0[0] < latMax\n#         val = 0.01\n#         console.log 'after for'\n#         console.log 'x0' + X0 = object.marker0[0]\n#         console.log 'y0' + Y0 = object.marker0[1] + val\n#         X1 = object.marker1[0]\n#         Y1 = object.marker1[1] + val\n#         urlE = urlMaker(X1, Y1, X0, Y0)\n#         saveBound(Y0, X0, Y1, X1, urlE, \"db\")\n#         saveBound(Y0, X0, Y1, X1, urlE, \"ar\")\n#         southToNord()\n#       else\n#         crawler()\n\n# eastToWest = (latMax, lonMax) ->\n#   console.log 'eastToWest'\n#   last = arrayOfObj[-1..]\n#   console.log last\n#   for key, object of last\n#     if object.marker0[1] < lonMax\n#       val = 0.001\n#       console.log 'after for'\n#       console.log 'x0' + X0 = object.marker0[0] + val\n#       console.log 'y0' + Y0 = object.marker0[1]\n#       X1 = object.marker1[0] + val\n#       Y1 = object.marker1[1]\n#       urlE = urlMaker(X1, Y1, X0, Y0)\n#       saveBound(Y0, X0, Y1, X1, urlE, \"db\")\n#       saveBound(Y0, X0, Y1, X1, urlE, \"ar\")\n#       eastToWest()\n#     else\n#       southToNord(latMax)\n\n# makeSearch = (latMax, lonMax) ->\n#   return eastToWest(latMax,lonMax)\n\n# initSearch = () ->\n#     array = Searchs.find().fetch()\n#     for key, object of array\n#       val = 0.01\n#       assocLat = object.SW[1] + val\n#       assocLng = object.SW[0]+ val\n#       url1 = urlMaker(assocLng, assocLat, object.SW[0], object.SW[1])\n#       arrayOfObj.push {\n#         marker0: [object.SW[0], object.SW[1]]\n#         marker1: [assocLng, assocLat]\n#         URL: url1\n#       }\n#       makeSearch(object.NE[1], object.NE[0])\n\n# count = 0\n# query = Searchs.find({})\n# handle = query.observeChanges(\n#   added: (id, user) ->\n#     count++\n#     console.log count\n#     initSearch()\n#     return\n\n#   removed: ->\n#     count--\n#     console.log \"Lost one. We're now down to \" + count + \" admins.\"\n#     return\n# )\n\n# setInterval (->\n#   handle.start\n#   return\n# ), 3000"]}